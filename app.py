import os
import io
import base64
from flask import Flask, request, jsonify, render_template, send_file
from dotenv import load_dotenv
from flask_cors import CORS
from openai import OpenAI
from PIL import Image
import matplotlib.pyplot as plt
import google.generativeai as genai

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh VNES AI API (s·ª≠ d·ª•ng Gemini backend)
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# C·∫•u h√¨nh DeepSeek API
deepseek_client = OpenAI(
    api_key=os.getenv("DEEPSEEK_API_KEY"),
    base_url="https://api.deepseek.com"
)

# C·∫•u h√¨nh OpenRouter API
openrouter_client = OpenAI(
    api_key=os.getenv("OPENROUTER_API_KEY"),
    base_url="https://openrouter.ai/api/v1"
)

app = Flask(__name__)
CORS(app)

# Ki·ªÉm tra c√¢u h·ªèi To√°n h·ªçc
def is_math_question(question):
    keywords = ["gi·∫£i", "ph∆∞∆°ng tr√¨nh", "t√≠nh", "ƒë·∫°o h√†m", "t√≠ch ph√¢n", "bi·ªÉu ƒë·ªì", "h√¨nh h·ªçc", "v·∫Ω"]
    return any(kw in question.lower() for kw in keywords)

# T·∫°o ·∫£nh k·∫øt qu·∫£ to√°n h·ªçc
def generate_math_image(text):
    try:
        fig, ax = plt.subplots(figsize=(10, 3))
        ax.text(0.5, 0.5, text, fontsize=14, ha='center', va='center', wrap=True)
        ax.axis('off')
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        plt.close(fig)
        buf.seek(0)
        return buf
    except Exception as e:
        print("‚ùå L·ªói t·∫°o ·∫£nh:", e)
        return None

# G·ª≠i t·ªõi VNES AI (s·ª≠ d·ª•ng Gemini backend)
def ask_vnes_ai(question, image):
    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        if image:
            image = Image.open(image).convert("RGB")
            response = model.generate_content([question, image])
        else:
            response = model.generate_content(question)

        # X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ VNES AI
        if hasattr(response, 'text'):
            answer = response.text
        elif hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]
            if hasattr(candidate, 'content') and hasattr(candidate.content, 'parts'):
                answer = candidate.content.parts[0].text if hasattr(candidate.content.parts[0], 'text') else str(candidate.content.parts[0])
            else:
                raise ValueError("VNES AI kh√¥ng c√≥ n·ªôi dung h·ª£p l·ªá trong candidates. Ph·∫£n h·ªìi: " + str(response))
        elif hasattr(response, 'parts') and response.parts:
            answer = response.parts[0].text if hasattr(response.parts[0], 'text') else str(response.parts[0])
        else:
            raise ValueError("VNES AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung h·ª£p l·ªá. Ph·∫£n h·ªìi: " + str(response))

        if is_math_question(question):
            return {"image": generate_math_image(answer), "ai": "vnes_ai"}
        return {"text": answer, "ai": "vnes_ai"}
    except Exception as e:
        print("‚ùå VNES AI error:", e)
        return {"error": str(e), "ai": "vnes_ai"}

# G·ª≠i t·ªõi DeepSeek API
def ask_deepseek(question, image):
    try:
        if image:
            return {"error": "DeepSeek API hi·ªán kh√¥ng h·ªó tr·ª£ h√¨nh ·∫£nh.", "ai": "deepseek"}

        response = deepseek_client.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": question}],
            max_tokens=1024
        )
        answer = response.choices[0].message.content

        if is_math_question(question):
            return {"image": generate_math_image(answer), "ai": "deepseek"}
        return {"text": answer, "ai": "deepseek"}
    except Exception as e:
        print("‚ùå DeepSeek error:", e)
        return {"error": str(e), "ai": "deepseek"}

# G·ª≠i t·ªõi OpenRouter API (v·ªõi m√¥ h√¨nh t∆∞∆°ng t·ª± ChatGPT)
def ask_openrouter(question, image):
    try:
        if image:
            return {"error": "OpenRouter API hi·ªán kh√¥ng h·ªó tr·ª£ h√¨nh ·∫£nh v·ªõi m√¥ h√¨nh mi·ªÖn ph√≠.", "ai": "openrouter"}

        # S·ª≠ d·ª•ng m√¥ h√¨nh mi·ªÖn ph√≠ ho·∫∑c m√¥ h√¨nh OpenAI n·∫øu b·∫°n c√≥ quy·ªÅn truy c·∫≠p
        model = "meta-llama/llama-3.1-8b-instruct:free"  # M√¥ h√¨nh mi·ªÖn ph√≠
        # N·∫øu b·∫°n c√≥ quy·ªÅn truy c·∫≠p v√†o m√¥ h√¨nh OpenAI qua OpenRouter, c√≥ th·ªÉ thay b·∫±ng:
        # model = "openai/gpt-3.5-turbo"

        response = openrouter_client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": question}],
            max_tokens=1024
        )
        answer = response.choices[0].message.content

        if is_math_question(question):
            return {"image": generate_math_image(answer), "ai": "openrouter"}
        return {"text": answer, "ai": "openrouter"}
    except Exception as e:
        print("‚ùå OpenRouter error:", e)
        return {"error": str(e), "ai": "openrouter"}

# Giao di·ªán
@app.route('/')
def home():
    return render_template('index.html')

# API ch√≠nh
@app.route('/ask-image', methods=['POST'])
def ask_with_image():
    question = request.form.get('question')
    image = request.files.get('image')
    ai_model = request.form.get('ai', 'vnes_ai')

    if not question:
        return jsonify({"error": "C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.", "ai": ai_model}), 400

    if ai_model == "deepseek":
        result = ask_deepseek(question, image)
    elif ai_model == "openrouter":
        result = ask_openrouter(question, image)
    else:
        result = ask_vnes_ai(question, image)

    if "image" in result:
        return send_file(result["image"], mimetype='image/png')
    elif "text" in result:
        return jsonify({"answer": result["text"], "ai": result["ai"]})
    else:
        return jsonify({"error": result.get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh."), "ai": result["ai"]}), 500

if __name__ == '__main__':
    gemini_key = os.getenv("GEMINI_API_KEY")
    deepseek_key = os.getenv("DEEPSEEK_API_KEY")
    openrouter_key = os.getenv("OPENROUTER_API_KEY")
    print("üîß GEMINI_API_KEY (d√πng cho VNES AI):", (gemini_key[:10] + "...") if gemini_key else "Ch∆∞a ƒë·∫∑t")
    print("üîß DEEPSEEK_API_KEY:", (deepseek_key[:10] + "...") if deepseek_key else "Ch∆∞a ƒë·∫∑t")
    print("üîß OPENROUTER_API_KEY:", (openrouter_key[:10] + "...") if openrouter_key else "Ch∆∞a ƒë·∫∑t")
    app.run(host='0.0.0.0', port=5000, debug=True)
